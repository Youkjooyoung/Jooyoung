<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.model2.mvc.service.product.ProductDao">

	<resultMap id="product"
		type="com.model2.mvc.service.domain.Product">
		<id property="prodNo" column="PROD_NO" />
		<result property="prodName" column="PROD_NAME" />
		<result property="prodDetail" column="PROD_DETAIL" />
		<result property="manuDate" column="MANUFACTURE_DAY" />
		<result property="price" column="PRICE" />
		<result property="fileName" column="IMAGE_FILE" />
		<result property="regDate" column="REG_DATE" />
		<result property="viewCount" column="VIEW_COUNT" />
		<result property="stockQty" column="STOCK_QTY" />
		<result property="availableQty" column="AVAILABLE_QTY" />
		<result property="cancelReqCnt" column="CANCEL_REQ_CNT" />
	</resultMap>

	<sql id="WhereSearch">
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				<choose>
					<when test="searchCondition == 'prodName'">
						PROD_NAME LIKE '%' || #{searchKeyword} || '%'
					</when>
					<when test="searchCondition == 'prodDetail'">
						PROD_DETAIL LIKE '%' || #{searchKeyword} || '%'
					</when>
					<otherwise>
						(PROD_NAME LIKE '%' || #{searchKeyword} || '%'
						OR PROD_DETAIL LIKE '%' || #{searchKeyword} || '%')
					</otherwise>
				</choose>
			</if>

			<if test="minPrice != null and minPrice &gt; 0">
				AND PRICE &gt;= #{minPrice}
			</if>
			<if test="maxPrice != null and maxPrice &gt; 0">
				AND PRICE &lt;= #{maxPrice}
			</if>
		</where>
	</sql>

	<!-- 단건 -->
	<select id="getProduct" parameterType="int" resultMap="product">
		SELECT
		p.PROD_NO, p.PROD_NAME, p.PROD_DETAIL, p.MANUFACTURE_DAY,
		p.PRICE, p.IMAGE_FILE, p.REG_DATE, p.VIEW_COUNT, p.STOCK_QTY,
		CASE WHEN p.STOCK_QTY &lt; 0 THEN 0 ELSE p.STOCK_QTY END AS AVAILABLE_QTY,
		(SELECT COUNT(*) FROM TRANSACTION t
		WHERE t.PROD_NO = p.PROD_NO AND t.TRAN_STATUS_CODE = '004') AS
		CANCEL_REQ_CNT
		FROM PRODUCT p
		WHERE p.PROD_NO = #{prodNo}
	</select>

	<!-- 등록 -->
	<insert id="addProduct"
		parameterType="com.model2.mvc.service.domain.Product">
		<selectKey keyProperty="prodNo" resultType="int"
			order="BEFORE">
			SELECT SEQ_PRODUCT_PROD_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PRODUCT
		(PROD_NO, PROD_NAME, PROD_DETAIL, MANUFACTURE_DAY, PRICE,
		IMAGE_FILE, REG_DATE, STOCK_QTY, VIEW_COUNT)
		VALUES
		(#{prodNo}, #{prodName}, #{prodDetail}, #{manuDate}, #{price},
		#{fileName, jdbcType=VARCHAR}, SYSDATE, #{stockQty}, 0)
	</insert>

	<!-- 수정 -->
	<update id="updateProduct"
		parameterType="com.model2.mvc.service.domain.Product">
		UPDATE PRODUCT
		<trim prefix="SET" suffixOverrides=",">
			REG_DATE = REG_DATE,
			<if test="prodName != null and prodName != ''"> PROD_NAME = #{prodName}, </if>
			<if test="prodDetail != null and prodDetail != ''"> PROD_DETAIL = #{prodDetail}, </if>
			<if test="manuDate != null and manuDate != ''"> MANUFACTURE_DAY = #{manuDate}, </if>
			<if test="price != null and price != ''"> PRICE = #{price}, </if>
			<if test="fileName != null and fileName != ''"> IMAGE_FILE = #{fileName, jdbcType=VARCHAR}, </if>
			<if test="stockQty != null"> STOCK_QTY = #{stockQty}, </if>
		</trim>
		WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 삭제 -->
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM PRODUCT WHERE PROD_NO = #{prodNo}
	</delete>

	<!-- 상세 이미지 -->
	<insert id="addProductImage"
		parameterType="com.model2.mvc.service.domain.ProductImage">
		<selectKey keyProperty="imgId" resultType="int"
			order="BEFORE">
			SELECT PRODUCT_IMG_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PRODUCT_IMAGE (IMG_ID, PROD_NO, FILE_NAME)
		VALUES (#{imgId}, #{prodNo}, #{fileName})
	</insert>

	<delete id="deleteProductImage" parameterType="int">
		DELETE FROM PRODUCT_IMAGE WHERE IMG_ID = #{imgId}
	</delete>

	<select id="getProductImages" parameterType="int"
		resultType="com.model2.mvc.service.domain.ProductImage">
		SELECT IMG_ID AS imgId, PROD_NO AS prodNo, FILE_NAME AS fileName
		FROM PRODUCT_IMAGE
		WHERE PROD_NO = #{prodNo}
		ORDER BY IMG_ID DESC
	</select>

	<!-- 리스트(검색/정렬/페이징) -->
	<select id="getProductList" parameterType="map"
		resultMap="product">
		SELECT * FROM (
		SELECT ROWNUM AS rnum, A.* FROM (
		SELECT
		p.PROD_NO, p.PROD_NAME, p.PROD_DETAIL, p.MANUFACTURE_DAY, p.PRICE,
		p.IMAGE_FILE, p.REG_DATE, p.VIEW_COUNT, p.STOCK_QTY,
		CASE WHEN p.STOCK_QTY &lt; 0 THEN 0 ELSE p.STOCK_QTY END AS AVAILABLE_QTY,
		(SELECT COUNT(*) FROM TRANSACTION t
		WHERE t.PROD_NO = p.PROD_NO AND t.TRAN_STATUS_CODE = '004') AS
		CANCEL_REQ_CNT
		FROM PRODUCT p
		<include refid="WhereSearch" />
		<choose>
			<when test="sort == 'priceAsc'"> ORDER BY p.PRICE ASC </when>
			<when test="sort == 'priceDesc'"> ORDER BY p.PRICE DESC </when>
			<when test="sort == 'popular'"> ORDER BY p.VIEW_COUNT DESC, p.PROD_NO DESC </when>
			<otherwise> ORDER BY p.PROD_NO DESC </otherwise>
		</choose>
		) A
		WHERE ROWNUM &lt;= #{endRowNum}
		)
		WHERE rnum &gt;= #{startRowNum}
	</select>

	<!-- 총건수 -->
	<select id="getTotalCount"
		parameterType="com.model2.mvc.common.Search" resultType="int">
		SELECT COUNT(*) FROM PRODUCT
		<include refid="WhereSearch" />
	</select>

	<!-- 관리자 전용 리스트 -->
	<select id="getProductListForManage" parameterType="map"
		resultMap="product">
		SELECT * FROM (
		SELECT ROWNUM rnum, A.* FROM (
		SELECT
		p.PROD_NO, p.PROD_NAME, p.PROD_DETAIL, p.MANUFACTURE_DAY, p.PRICE,
		p.IMAGE_FILE, p.REG_DATE, p.VIEW_COUNT, p.STOCK_QTY,
		CASE WHEN p.STOCK_QTY &lt; 0 THEN 0 ELSE p.STOCK_QTY END AS AVAILABLE_QTY,
		(SELECT COUNT(*) FROM TRANSACTION t
		WHERE t.PROD_NO = p.PROD_NO AND t.TRAN_STATUS_CODE = '004') AS
		CANCEL_REQ_CNT
		FROM PRODUCT p
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				AND (p.PROD_NAME LIKE '%'||#{searchKeyword}||'%'
				OR p.PROD_DETAIL LIKE '%'||#{searchKeyword}||'%')
			</if>
		</where>
		<choose>
			<when test="sort == 'popular'"> ORDER BY p.VIEW_COUNT DESC, p.PROD_NO DESC </when>
			<otherwise> ORDER BY p.PROD_NO DESC </otherwise>
		</choose>
		) A
		WHERE ROWNUM &lt;= #{endRowNum}
		)
		WHERE rnum &gt;= #{startRowNum}
	</select>

	<!-- 뷰카운트 -->
	<update id="updateViewCount" parameterType="int">
		UPDATE PRODUCT SET VIEW_COUNT = NVL(VIEW_COUNT,0) + 1
		WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 재고 증감 -->
	<update id="decreaseStock" parameterType="map">
		UPDATE PRODUCT
		SET STOCK_QTY = STOCK_QTY - #{qty}
		WHERE PROD_NO = #{prodNo}
		AND STOCK_QTY &gt;= #{qty}
	</update>

	<update id="increaseStock" parameterType="map">
		UPDATE PRODUCT
		SET STOCK_QTY = STOCK_QTY + #{qty}
		WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 자동완성 (파라미터명 keyword로 통일) -->
	<select id="suggestProductNames" parameterType="string"
		resultType="string">
		SELECT PROD_NAME
		FROM (
		SELECT DISTINCT PROD_NAME FROM PRODUCT
		WHERE LOWER(PROD_NAME) LIKE '%' || LOWER(#{keyword}) || '%'
		ORDER BY PROD_NAME
		) WHERE ROWNUM &lt;= 10
	</select>

	<select id="suggestProductDetails" parameterType="string"
		resultType="string">
		SELECT PROD_DETAIL
		FROM (
		SELECT DISTINCT PROD_DETAIL FROM PRODUCT
		WHERE LOWER(PROD_DETAIL) LIKE '%' || LOWER(#{keyword}) || '%'
		ORDER BY PROD_DETAIL
		) WHERE ROWNUM &lt;= 10
	</select>

</mapper>
