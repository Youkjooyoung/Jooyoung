<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">

	<!-- 상품 매핑 -->
	<resultMap id="product"
		type="com.model2.mvc.service.domain.Product">
		<id property="prodNo" column="PROD_NO" />
		<result property="prodName" column="PROD_NAME" />
		<result property="prodDetail" column="PROD_DETAIL" />
		<result property="manuDate" column="MANUFACTURE_DAY" />
		<result property="price" column="PRICE" />
		<result property="fileName" column="IMAGE_FILE" />
		<result property="regDate" column="REG_DATE" />
		<result property="viewCount" column="VIEW_COUNT" />
		<result property="buyerId" column="BUYER_ID" />
		<result property="buyDate" column="BUY_DATE" />
		<result property="tranStatusCode" column="TRAN_STATUS_CODE" />
	</resultMap>

	<sql id="Base_Columns">
		PROD_NO,
		PROD_NAME,
		PROD_DETAIL,
		TO_CHAR(MANUFACTURE_DAY,'YYYYMMDD') AS MANUFACTURE_DAY,
		PRICE,
		IMAGE_FILE,
		REG_DATE,
		VIEW_COUNT
	</sql>

	<!-- 취소상태코드 리스트 -->
	<sql id="Cancelled_Status_List">
		('004','005')
	</sql>

	<!-- 검색조건(where) -->
	<sql id="Search_Where">
		<where>
			<if test="searchKeyword != null and searchKeyword != ''">
				<choose>
					<when test="searchCondition == 'prodName'">
						PROD_NAME LIKE '%' || #{searchKeyword} || '%'
					</when>
					<when test="searchCondition == 'prodDetail'">
						PROD_DETAIL LIKE '%' || #{searchKeyword} || '%'
					</when>
					<otherwise>
						(PROD_NAME LIKE '%' || #{searchKeyword} || '%'
						OR
						PROD_DETAIL LIKE '%' || #{searchKeyword} || '%')
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>

	<!-- 단건 조회 -->
	<select id="getProduct" parameterType="int" resultMap="product">
		SELECT
		PROD_NO, PROD_NAME, PROD_DETAIL,
		MANUFACTURE_DAY,
		PRICE, IMAGE_FILE, REG_DATE, VIEW_COUNT
		FROM PRODUCT
		WHERE PROD_NO = #{prodNo}
	</select>

	<!-- 등록(저장 시에는 DATE 컬럼으로 변환) -->
	<insert id="addProduct" parameterType="product">
		<selectKey keyProperty="prodNo" resultType="int"
			order="BEFORE">
			SELECT SEQ_PRODUCT_PROD_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PRODUCT
		(PROD_NO, PROD_NAME, PROD_DETAIL, MANUFACTURE_DAY, PRICE, IMAGE_FILE, REG_DATE)
		VALUES
		(#{prodNo}, #{prodName}, #{prodDetail}, #{manuDate}, #{price}, #{fileName,
		jdbcType=VARCHAR}, SYSDATE)
	</insert>

	<!-- 상세이미지 등록 -->
	<insert id="addProductImage" parameterType="productImage">
		<selectKey keyProperty="imgId" resultType="int"
			order="BEFORE">
			SELECT PRODUCT_IMG_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO PRODUCT_IMAGE (IMG_ID, PROD_NO, FILE_NAME)
		VALUES
		(#{imgId}, #{prodNo}, #{fileName})
	</insert>

	<!-- 수정(저장 시 DATE 변환) -->
	<update id="updateProduct" parameterType="product">
		UPDATE PRODUCT
		SET PROD_NAME = #{prodName},
		PROD_DETAIL = #{prodDetail},
		MANUFACTURE_DAY = #{manuDate},
		PRICE = #{price},
		IMAGE_FILE = #{fileName, jdbcType=VARCHAR}
		WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 삭제 -->
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM PRODUCT
		WHERE PROD_NO = #{prodNo}
	</delete>

	<!-- 대표이미지 수정 -->
	<update id="updateProductFileName" parameterType="product">
		UPDATE PRODUCT
		SET IMAGE_FILE = #{fileName}
		WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 상세이미지 삭제 -->
	<delete id="deleteProductImage" parameterType="int">
		DELETE FROM
		PRODUCT_IMAGE WHERE IMG_ID = #{imgId}
	</delete>

	<!-- 목록(페이징) : 제조일자 TO_CHAR로 통일 -->
	<select id="getProductList" parameterType="map"
	resultMap="product">
	SELECT * FROM (
	SELECT ROWNUM rnum, A.*
	FROM (
	SELECT
	p.PROD_NO,
	p.PROD_NAME,
	p.PROD_DETAIL,
	p.MANUFACTURE_DAY,
	p.PRICE,
	p.IMAGE_FILE,
	p.REG_DATE,
	p.VIEW_COUNT,
	CASE WHEN t.TRAN_STATUS_CODE IN ('004','005') THEN NULL ELSE t.BUYER_ID END
	AS BUYER_ID,
	CASE WHEN t.TRAN_STATUS_CODE IN ('004','005') THEN NULL
	ELSE TO_CHAR(t.ORDER_DATE,'YYYY-MM-DD') END AS BUY_DATE,
	t.TRAN_STATUS_CODE
	FROM PRODUCT p
	LEFT JOIN (
	SELECT tr.PROD_NO, tr.BUYER_ID, tr.ORDER_DATE, tr.TRAN_STATUS_CODE,
	ROW_NUMBER() OVER (PARTITION BY tr.PROD_NO ORDER BY tr.TRAN_NO DESC) AS
	rn
	FROM TRANSACTION tr
	) t
	ON p.PROD_NO = t.PROD_NO AND t.rn = 1
	<include refid="Search_Where" />
	<if test="minPrice != null and minPrice > 0">
		AND p.PRICE &gt;= #{minPrice}
	</if>
	<if test="maxPrice != null and maxPrice > 0">
		AND p.PRICE &lt;= #{maxPrice}
	</if>
	<choose>
		<when test="sort == 'priceAsc'"> ORDER BY p.PRICE ASC </when>
		<when test="sort == 'priceDesc'"> ORDER BY p.PRICE DESC </when>
		<otherwise> ORDER BY p.PROD_NO DESC </otherwise>
	</choose>
	) A
	WHERE ROWNUM &lt;= #{endRowNum}
	)
	WHERE rnum &gt;= #{startRowNum}
</select>


	<!-- 조회수 증가 -->
	<update id="updateViewCount" parameterType="int">
		UPDATE PRODUCT SET
		VIEW_COUNT = VIEW_COUNT + 1 WHERE PROD_NO = #{prodNo}
	</update>

	<!-- 상세이미지 조회 -->
	<select id="getProductImages" parameterType="int"
		resultType="productImage">
		SELECT IMG_ID AS imgId, PROD_NO AS prodNo, FILE_NAME AS
		fileName
		FROM PRODUCT_IMAGE
		WHERE PROD_NO = #{prodNo}
	</select>

	<!-- 총건수 -->
	<select id="getTotalCount"
		parameterType="com.model2.mvc.common.Search" resultType="int">
		SELECT COUNT(*) FROM PRODUCT
		<include refid="Search_Where" />
	</select>

	<!-- 조건검색(제조일자도 yyyyMMdd 문자열로 비교) -->
	<select id="getProductListByCond" parameterType="product"
		resultMap="product">
		SELECT
		PROD_NO,
		PROD_NAME,
		PROD_DETAIL,
		TO_CHAR(MANUFACTURE_DAY,'YYYYMMDD') AS MANUFACTURE_DAY,
		PRICE,
		IMAGE_FILE, REG_DATE, VIEW_COUNT
		FROM PRODUCT
		<where>
			<if test="prodNo   != null and prodNo   != 0"> PROD_NO = #{prodNo} </if>
			<if test="prodName != null and prodName != ''"> AND PROD_NAME LIKE '%' || #{prodName} || '%' </if>
			<if test="manuDate!= null and manuDate!= ''"> AND TO_CHAR(MANUFACTURE_DAY,'YYYYMMDD') = #{manuDate}
			</if>
			<if test="price    != null and price    != 0"> AND PRICE = #{price} </if>
		</where>
		ORDER BY PROD_NO DESC
	</select>

	<!-- 판매관리 목록(이미 Base_Columns 사용 → OK) -->
	<select id="getProductListForManage" parameterType="map"
		resultMap="product">
		SELECT * FROM (
		SELECT ROWNUM rnum, A.* FROM (
		SELECT
		<include refid="Base_Columns" />
		,
		tx.BUYER_ID AS BUYER_ID,
		TO_CHAR(tx.TRAN_DATE,'YYYYMMDD') AS BUY_DATE
		FROM PRODUCT p
		LEFT JOIN (
		SELECT PROD_NO, BUYER_ID, TRAN_DATE
		FROM (
		SELECT t.*, ROW_NUMBER() OVER(PARTITION BY t.PROD_NO ORDER BY
		t.TRAN_DATE
		DESC) rn
		FROM TRANSACTION t
		) WHERE rn = 1
		) tx ON tx.PROD_NO
		= p.PROD_NO
		<include refid="Search_Where" />
		<choose>
			<when test="sort == 'priceAsc'"> ORDER BY p.PRICE ASC  </when>
			<when test="sort == 'priceDesc'"> ORDER BY p.PRICE DESC </when>
			<otherwise> ORDER BY p.PROD_NO DESC</otherwise>
		</choose>
		) A WHERE ROWNUM &lt;= #{endRowNum}
		) WHERE rnum &gt;= #{startRowNum}
	</select>
	
	<!-- 자동완성 :: 상품1,상품2 숫자까지 정렬 -->
<select id="suggestProductNames" parameterType="map"
	resultType="string">
	SELECT PROD_NAME
	FROM (
	SELECT PROD_NAME
	FROM PRODUCT
	WHERE (
	(LENGTH(#{keyword}) = 1 AND INSTR(LOWER(PROD_NAME), LOWER(#{keyword})) > 0)
	OR (LENGTH(#{keyword}) > 1 AND LOWER(PROD_NAME) LIKE LOWER(#{keyword}) ||
	'%')
	)
	ORDER BY
	TO_NUMBER(REGEXP_SUBSTR(PROD_NAME, '[0-9]+')) NULLS FIRST,
	PROD_NAME
	)
	WHERE ROWNUM &lt;= 10
</select>

<!-- 자동완성: 상세설명 keyword 포함 (문장의 앞 50자 정도 예시로 노출, 10건) -->
<select id="suggestProductDetails" parameterType="map"
	resultType="string">
	SELECT SUGG
	FROM (
	SELECT DISTINCT TRIM(SUBSTR(PROD_DETAIL, 1, 50)) AS SUGG
	FROM PRODUCT
	WHERE INSTR(LOWER(PROD_DETAIL), LOWER(#{keyword})) > 0
	ORDER BY SUGG
	)
	WHERE ROWNUM &lt;= 10
</select>

</mapper>
